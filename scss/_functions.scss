/* New Syntax, allows to optionally calculate on a different base value to counter compounding effect of em's. */
/* Call with 1, 2, 3 or 4 parameters, 'px' is not required but supported */
/* em-calc(10 20 30px 40); */
/* Space delimited, if you want to delimit using comma's, wrap it in another pair of brackets */
/* em-calc((10, 20, 30, 40px)); */
/* Optionally call with a different base (eg: 8px) to calculate em. */
/* em-calc(16px 32px 48px, 8px); */
/* If you require to comma separate your list */
/* em-calc((16px, 32px, 48), 8px); */

/* Since the typical default browser font-size is 16px, that makes the calculation for grid size. */
/* If you want your base font-size to be a different size and not have it effect grid size too, */
/* set the value of $em-base to $base-font-size ($em-base: $base-font-size;) */
$em-base: 16px !default;

/* It strips the unit of measure and returns it */
@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

@function convert-to-em($value, $base-value: $em-base)  {
  $value: strip-unit($value) / strip-unit($base-value) * 1em;
  @if ($value == 0em) { $value: 0; } /* Turn 0em into 0 */
  @return $value;
}

@function em-calc($values, $base-value: $em-base) {
  $max: length($values);

  @if $max == 1 { @return convert-to-em(nth($values, 1), $base-value); }

  $emValues: ();
  @for $i from 1 through $max {
    $emValues: append($emValues, convert-to-em(nth($values, $i), $base-value));
  }
  @return $emValues;
}

/* Support for the old syntax */

@function emCalc($values){
  @return em-calc($values);
}